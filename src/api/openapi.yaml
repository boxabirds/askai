openapi: 3.0.0
info:
  title: Todo API
  version: 1.0.0
  description: API for managing todo items
servers:
  - url: http://localhost:3000
    description: Development server
paths:
  /api/ask:
    post:
      summary: Ask AI about the API
      operationId: askAi
      tags:
        - ai
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AskAiRequest'
      responses:
        '200':
          description: AI response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AskAiResponse'
  /api/todos:
    get:
      summary: List all todos
      operationId: listTodos
      tags:
        - todos
      responses:
        '200':
          description: List of todos
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
    post:
      summary: Create a new todo
      operationId: createTodo
      tags:
        - todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - text
              properties:
                text:
                  type: string
      responses:
        '201':
          description: Created todo
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
  /api/todos/{id}:
    delete:
      summary: Delete a todo
      operationId: deleteTodo
      tags:
        - todos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      responses:
        '200':
          description: Todo deleted successfully
        '404':
          description: Todo not found
    patch:
      summary: Update a todo
      operationId: updateTodo
      tags:
        - todos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                text:
                  type: string
                completed:
                  type: boolean
      responses:
        '200':
          description: Todo updated successfully
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Todo'
        '404':
          description: Todo not found
  /api/todos/batch/delete:
    post:
      summary: Delete multiple todos
      operationId: deleteTodos
      tags:
        - todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
              properties:
                ids:
                  oneOf:
                    - type: array
                      items:
                        type: string
                    - type: string
                      enum: ['all']
      responses:
        '200':
          description: Todos deleted successfully
  /api/todos/batch/complete:
    post:
      summary: Mark multiple todos as complete
      operationId: completeTodos
      tags:
        - todos
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - ids
                - completed
              properties:
                ids:
                  oneOf:
                    - type: array
                      items:
                        type: string
                    - type: string
                      enum: ['all']
                completed:
                  type: boolean
      responses:
        '200':
          description: Todos updated successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Todo'
components:
  schemas:
    Todo:
      type: object
      required:
        - id
        - text
        - completed
        - createdAt
      properties:
        id:
          type: string
        text:
          type: string
        completed:
          type: boolean
        createdAt:
          type: string
          format: date-time
    AskAiRequest:
      type: object
      required:
        - query
      properties:
        query:
          type: string
          description: The natural language query about the API
    AskAiResponse:
      type: object
      required:
        - response
        - success
      properties:
        response:
          type: string
          description: A clear explanation of what action was taken or why no action was possible
        success:
          type: boolean
          description: Whether a valid tool was identified for the request
        selectedTool:
          type: string
          description: The name of the selected tool (only present if success is true)
        parameters:
          type: object
          additionalProperties: true
          description: Parameters for the selected tool (only present if success is true)
